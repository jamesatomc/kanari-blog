---
interface Props {
    title: string;
}

const { title } = Astro.props;
import "../styles/global.css";
import "../styles/markdown.css";
---

<!doctype html>
<html lang="en" class="dark">
    <head>
        <meta charset="UTF-8" />
        <meta name="description" content="Kanari Network" />
        <meta name="viewport" content="width=device-width" />
        <meta name="color-scheme" content="dark light" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta 
            http-equiv="Content-Security-Policy" 
            content="default-src 'self'; 
                     script-src 'self' 'unsafe-inline';
                     style-src 'self' 'unsafe-inline';
                     font-src 'self' data:;" 
        />
        
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <link rel="preload" href="/assets/fonts/fontawesome/css/all.min.css" as="style" />
        <link rel="stylesheet" href="/assets/fonts/fontawesome/css/all.min.css" />
        
        <meta name="generator" content={Astro.generator} />
        <title>{title}</title>
    </head>
    <body>
        <slot />
    </body>
</html>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');

        if (mobileMenuButton && mobileMenu) {
            mobileMenuButton.addEventListener('click', () => {
                mobileMenu.classList.toggle('hidden');
                const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
                mobileMenuButton.setAttribute('aria-expanded', (!isExpanded).toString());
            });
        }
    });
</script>